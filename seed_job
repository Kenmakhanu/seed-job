job('Staging_job') {
   label('worker')
   description('This is deployment to staging environment')
  
  scm {
        github('Kenmakhanu/maven-web-app', 'master')
   
    }
  
  logRotator {
        daysToKeep(5)
        numToKeep(5)
        artifactNumToKeep(5)
    }
  steps {
    
        maven {
            mavenInstallation('Maven 3.6.3') 
            goals('clean')
            goals('install')
            properties(skipTests: true) 
        }
    }
  
  publishers {
        archiveArtifacts {
            pattern('**/*.war')
            onlyIfSuccessful()
        }
    }

 postBuildSteps(STATUS_SUCCESS){
            def mavenPom = readMavenPom file:'pom.xml'
            def nexusRepoName = mavenPom.version.endsWith("SNAPSHOT") ? "Kens-repo-snapshot" : "kens-repo-release"
            nexusArtifactUploader artifacts: [
               [
                  artifactId: 'maven-web-application', 
                  classifier: '', 
                  file: "target/maven-web-application-${mavenPom.version}.war",
                  type: 'war'
               ]
                ],
                credentialsId: 'nexus-user-credentials',
                groupId: 'com.mt',
                nexusUrl: '35.87.18.98:8081',
                nexusVersion: 'nexus3',
                protocol: 'http', 
                repository: nexusRepoName,
                version: "${mavenPom.version}"
               }
            }
        }}

job('Production_job') {
   label('worker')
   description('This is deployment to production environment')
  
  scm {
        github('Kenmakhanu/maven-web-app', 'master')
    }
  
  logRotator {
        daysToKeep(5)
        numToKeep(5)
        artifactNumToKeep(5)
    }
  steps {
    
        maven {
            mavenInstallation('Maven 3.6.3')  
            goals('clean')
            goals('install')
            properties(skipTests: true)           
        }
    }
  publishers {
        archiveArtifacts {
            pattern('**/*.war')
            onlyIfSuccessful()
        }
    }
  
   postBuildSteps(STATUS_SUCCESS){
            def mavenPom = readMavenPom file:'pom.xml'
            def nexusRepoName = mavenPom.version.endsWith("SNAPSHOT") ? "Kens-repo-snapshot" : "kens-repo-release"
            nexusArtifactUploader artifacts: [
               [
                  artifactId: 'maven-web-application', 
                  classifier: '', 
                  file: "target/maven-web-application-${mavenPom.version}.war",
                  type: 'war'
               ]
                ],
                credentialsId: 'nexus-user-credentials',
                groupId: 'com.mt',
                nexusUrl: '35.87.18.98:8081',
                nexusVersion: 'nexus3',
                protocol: 'http', 
                repository: nexusRepoName,
                version: "${mavenPom.version}"
               }
            }
}

job('First-Maven-Project') {
    label('worker')
    description("First Maven job generated by the DSL on ${new Date()}, the project is a small Maven project hosted on github")
    scm {
        github('Kenmakhanu/maven-web-app', 'master')
    }
    triggers {
        scm('* * * * *')
    }
    steps {
        maven {
              mavenInstallation('Maven 3.6.3')
              goals('clean') 
              goals('package')
        }
    }
    publishers {
        archiveArtifacts {
            pattern('**/*.war')
            onlyIfSuccessful()
    }
}
}
